name: Reflex Documentation Automation

on:
  schedule:
    - cron: '0 */2 * * *' # Runs every 2 hours
  workflow_dispatch: # Allows manual triggering of the workflow
  push:
    branches: [main]
    paths: ['haupt.py', 'requirements.txt', '.github/workflows/**']

env:
  PYTHON_VERSION: '3.12.10'
  PYTHON_EXEC: /home/ubuntu/.pyenv/versions/3.12.10/bin/python
  TZ: 'Europe/Berlin'

jobs:
  setup-and-validate:
    name: Setup Environment & Validate
    runs-on: self-hosted
    outputs:
      python-cache-key: ${{ steps.cache-key.outputs.key }}
      requirements-hash: ${{ steps.hash.outputs.hash }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate cache key
        id: cache-key
        run: |
          echo "key=python-deps-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('requirements.txt') }}" >> $GITHUB_OUTPUT

      - name: Hash requirements
        id: hash
        run: |
          echo "hash=${{ hashFiles('requirements.txt') }}" >> $GITHUB_OUTPUT

      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'
          git config --global init.defaultBranch main

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Validate Python environment
        run: |
          echo "Python version: $(${{ env.PYTHON_EXEC }} --version)"
          echo "Pip version: $(${{ env.PYTHON_EXEC }} -m pip --version)"

      - name: Install Python dependencies
        run: |
          ${{ env.PYTHON_EXEC }} -m pip install --upgrade pip setuptools wheel
          ${{ env.PYTHON_EXEC }} -m pip install -r requirements.txt

      - name: Install Playwright browsers
        run: |
          ${{ env.PYTHON_EXEC }} -m playwright install --with-deps
          ${{ env.PYTHON_EXEC }} -m playwright install-deps

      - name: Validate automation script
        run: |
          if [[ ! -f "haupt.py" ]]; then
            echo "::error::haupt.py not found"
            exit 1
          fi
          ${{ env.PYTHON_EXEC }} -m py_compile haupt.py

  generate-docs:
    name: Generate Documentation
    runs-on: self-hosted
    needs: setup-and-validate
    outputs:
      docs-generated: ${{ steps.run-script.outputs.success }}
      changes-detected: ${{ steps.detect-changes.outputs.changes }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python (cached)
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Restore dependencies
        run: ${{ env.PYTHON_EXEC }} -m pip install -r requirements.txt

      - name: Run documentation automation
        id: run-script
        run: |
          echo "Starting documentation generation..."
          if ${{ env.PYTHON_EXEC }} haupt.py; then
            echo "success=true" >> $GITHUB_OUTPUT
            echo "Documentation generation completed successfully"
          else
            echo "success=false" >> $GITHUB_OUTPUT
            echo "::error::Documentation generation failed"
            exit 1
          fi

      - name: Detect changes
        id: detect-changes
        run: |
          if git diff --quiet && git diff --cached --quiet; then
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "No changes detected"
          else
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "Changes detected in documentation"
          fi

      - name: Upload generated docs as artifact
        if: steps.detect-changes.outputs.changes == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: generated-docs-${{ github.run_number }}
          path: |
            reflex_docs.txt
            *.md
          retention-days: 7

  update-timestamps:
    name: Update Timestamps
    runs-on: self-hosted
    needs: [setup-and-validate, generate-docs]
    if: always() && needs.setup-and-validate.result == 'success'
    outputs:
      timestamp-updated: ${{ steps.update-checked.outputs.updated }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Update last checked timestamp
        id: update-checked
        run: |
          current_time_str="$(date '+%Y-%m-%d %H:%M:%S %Z')"
          NEW_TIME_STRING="- Last checked: \`$current_time_str\`"
          
          echo "Updating last checked timestamp: $current_time_str"
          
          if sed -i "s|^- Last checked: <!-- LAST_CHECKED_PLACEHOLDER -->|${NEW_TIME_STRING}|g; s|^- Last checked: \`.*\`|${NEW_TIME_STRING}|g" README.md; then
            echo "updated=true" >> $GITHUB_OUTPUT
            echo "Timestamp updated successfully"
          else
            echo "updated=false" >> $GITHUB_OUTPUT
            echo "::warning::Failed to update timestamp"
          fi

      - name: Commit timestamp update
        if: steps.update-checked.outputs.updated == 'true'
        run: |
          git add README.md
          
          if git diff --cached --quiet; then
            echo "No timestamp changes to commit"
          else
            git commit -m "ci: update last checked timestamp [skip ci]"
            echo "Timestamp changes committed"
          fi

  publish-changes:
    name: Publish Documentation Updates
    runs-on: self-hosted
    needs: [generate-docs, update-timestamps]
    if: always()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download generated docs
        uses: actions/download-artifact@v4
        with:
          name: generated-docs-${{ github.run_number }}
        continue-on-error: true

      - name: Update last updated timestamp
        run: |
          current_time_str="$(date '+%Y-%m-%d %H:%M:%S %Z')"
          NEW_UPDATED_TIME_STRING="- Last updated: \`$current_time_str\`"
          echo "Updating last updated timestamp: $current_time_str"
          sed -i "s|^- Last updated: <!-- LAST_UPDATED_PLACEHOLDER -->|${NEW_UPDATED_TIME_STRING}|g; s|^- Last updated: \`.*\`|${NEW_UPDATED_TIME_STRING}|g" README.md

      - name: Stage all changes
        run: |
          git add .
          echo "All changes staged for commit"

      - name: Commit documentation updates
        run: |
          if git diff --cached --quiet; then
            echo "No changes to commit"
            exit 0
          fi
          git commit -m "docs: update Reflex documentation and timestamps
          - Updated documentation content
          - Refreshed last updated timestamp
          - Generated on $(date '+%Y-%m-%d %H:%M:%S %Z')
          [automated commit]"

      - name: Pull latest changes
        run: |
          echo "Syncing with remote repository..."
          git pull --rebase --autostash origin main || {
            echo "::error::Failed to sync with remote repository"
            exit 1
          }

      - name: Push documentation updates
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        run: |
          echo "Publishing documentation updates..."
          git push https://unfortunatelyalex:${{ secrets.PAT }}@github.com/unfortunatelyalex/reflex-docs.git main || {
            echo "::error::Failed to push documentation updates"
            exit 1
          }
          echo "✅ Documentation updates published successfully"

  cleanup:
    name: Cleanup & Notifications
    runs-on: self-hosted
    needs: [setup-and-validate, generate-docs, update-timestamps, publish-changes]
    if: always()
    steps:
      - name: Workflow summary
        run: |
          echo "## 📊 Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| Setup & Validate | ${{ needs.setup-and-validate.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Generate Docs | ${{ needs.generate-docs.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Update Timestamps | ${{ needs.update-timestamps.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Publish Changes | ${{ needs.publish-changes.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Execution Time:** $(date '+%Y-%m-%d %H:%M:%S %Z')" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.generate-docs.outputs.changes-detected }}" == "true" ]]; then
            echo "📝 **Documentation changes detected and published**" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ **No documentation changes required**" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Cleanup artifacts
        if: always()
        run: |
          echo "Performing cleanup tasks..."
          # Cleanup any temporary files if needed
          echo "Cleanup completed"
